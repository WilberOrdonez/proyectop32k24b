/*

 */

package vista;

import modelo.CursosDAO;
import modelo.SeccionDAO;
import controlador.Cursos;
import controlador.Maestros;
import controlador.Seccion;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.util.HashSet;
import java.util.Set;

import controlador.clsBitacora;
import controlador.clsUsuarioConectado;
import controlador.documentosCursos;
import controlador.tablaCursos;
import javax.swing.DefaultComboBoxModel;
import modelo.DetMaestroCursosDAO;
import modelo.MaestrosDAO;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

/**
 *
 * 
 */
public final class RegistroMaestros1 extends javax.swing.JInternalFrame {
    
//        int codigoAplicacion = 2020;
//
//    clsBitacora Auditoria = new clsBitacora();

    clsBitacora Auditoria = new clsBitacora();
    
   
    
    
    public void llenadoDeCombosMaestros() {
      MaestrosDAO MaestrosDAO = new MaestrosDAO();
        List<Maestros> maestros = MaestrosDAO.select();
        cmbMaestros.addItem("Seleccione una opción");
        for (int i = 0; i < maestros.size(); i++) {
            cmbMaestros.addItem(maestros.get(i).getNombre_maestro());
        
    }
        }

    /**
     *
     */
    public void llenadoDeCombosCursos() {
      CursosDAO cursosDAO = new CursosDAO();
        List<Cursos> cursos = cursosDAO.select();
        cmbCursos.addItem("Seleccione una opción");
        for (int i = 0; i < cursos.size(); i++) {
            cmbCursos.addItem(cursos.get(i).getNombre_curso());
        
    }
 }
    

    
  

    public void llenadoDeTablas() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Nombre Maestro");
        modelo.addColumn("Nombre curso");
        modelo.addColumn("Estatus");
        DetMaestroCursosDAO listInnerDocument = new DetMaestroCursosDAO();
        List<tablaCursos> lista = listInnerDocument.fillTable();
        tblDocumentos.setModel(modelo);
        String[] dato = new String[3];
        for (int i = 0; i < lista.size(); i++) {
            
            dato[0] = lista.get(i).getNombreMaestro();
            dato[1] = lista.get(i).getNombreCurso();
            dato[2] = lista.get(i).getEstado();
            modelo.addRow(dato);
        }
    }
         public RegistroMaestros1() {
        initComponents();
        llenadoDeCombosCursos();
        llenadoDeCombosMaestros();
        llenadoDeTablas();
        
      
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb2 = new javax.swing.JLabel();
        lbusu = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDocumentos = new javax.swing.JTable();
        lb = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        cmbMaestros = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chkActa = new javax.swing.JCheckBox();
        chkRepNotas = new javax.swing.JCheckBox();
        chkPlanificacion = new javax.swing.JCheckBox();
        chkExamen = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        cmbCursos = new javax.swing.JComboBox<>();

        lb2.setForeground(new java.awt.Color(204, 204, 204));
        lb2.setText(".");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Registro Maestros");
        setVisible(true);

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        tblDocumentos.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblDocumentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Maestro", "Nombre Curso", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDocumentos);

        lb.setForeground(new java.awt.Color(204, 204, 204));
        lb.setText(".");

        jButton2.setText("Ayuda");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cmbMaestros.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMaestrosItemStateChanged(evt);
            }
        });
        cmbMaestros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMaestrosActionPerformed(evt);
            }
        });

        jLabel1.setText("MAESTRO:");

        jLabel2.setText("REQUISITOS");

        chkActa.setText("Acta");
        chkActa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkActaItemStateChanged(evt);
            }
        });
        chkActa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkActaActionPerformed(evt);
            }
        });

        chkRepNotas.setText("Reporte de notas");
        chkRepNotas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkRepNotasItemStateChanged(evt);
            }
        });
        chkRepNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRepNotasActionPerformed(evt);
            }
        });

        chkPlanificacion.setText("Planificacion");
        chkPlanificacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkPlanificacionItemStateChanged(evt);
            }
        });

        chkExamen.setText("Examenes");
        chkExamen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkExamenItemStateChanged(evt);
            }
        });

        jLabel3.setText("CURSOS:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(21, 21, 21)
                                        .addComponent(cmbCursos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbMaestros, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chkExamen)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(chkActa)
                                                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(48, 48, 48)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(chkPlanificacion)
                                                .addComponent(chkRepNotas))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(113, 113, 113)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb)
                            .addComponent(cmbMaestros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkActa)
                            .addComponent(chkPlanificacion))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkExamen)
                            .addComponent(chkRepNotas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModificar)
                            .addComponent(btnLimpiar))
                        .addGap(95, 95, 95))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
////        // TODO add your handling code here:

// Obtener el maestro seleccionado
    // Obtener el maestro y curso seleccionados
    
    Maestros maestroSeleccionado = (Maestros) cmbMaestros.getSelectedItem();
    Cursos cursoSeleccionado = (Cursos) cmbCursos.getSelectedItem();
    
    // Verificar si se han seleccionado un maestro y un curso
    if (maestroSeleccionado != null && cursoSeleccionado != null) {
        // Obtener el estado actual del curso para el maestro seleccionado
        String estadoActual = obtenerEstadoCursoMaestro(maestroSeleccionado, cursoSeleccionado);
        
        // Verificar si se ha obtenido el estado actual correctamente
        if (estadoActual != null) {
            // Actualizar el estado del curso en función de los checkboxes seleccionados
            String nuevoEstado = calcularNuevoEstado(estadoActual);
            
            // Actualizar el estado del curso en la base de datos
            actualizarEstadoCurso(maestroSeleccionado, cursoSeleccionado, nuevoEstado);
        } else {
            // Error al obtener el estado actual del curso
            System.out.println("Error al obtener el estado actual del curso.");
        }
    } else {
        // No se ha seleccionado un maestro y/o un curso
        System.out.println("Por favor, seleccione un maestro y un curso.");
    }
}

// Método para obtener el estado actual del curso para un maestro seleccionado
private String obtenerEstadoCursoMaestro(Maestros maestro, Cursos curso) {
    List<tablaCursos> documentos = fillTable();
    for (tablaCursos documento : documentos) {
        if (documento.getNombreMaestro().equals(maestro.getNombre_maestro()) &&
            documento.getNombreCurso().equals(curso.getNombre_curso())) {
            return documento.getEstado();
        }
    }
    return null; // Devuelve null si no se encuentra el estado para el maestro y curso seleccionados
}

// Método para calcular el nuevo estado del curso en función de los checkboxes seleccionados
private String calcularNuevoEstado(String estadoActual) {
    // Lógica para calcular el nuevo estado aquí, dependiendo de los checkboxes seleccionados
    // Por ejemplo, si al menos uno de los checkboxes está seleccionado, cambiar de 'Solvente' a 'No solvente'
    // Si todos los checkboxes están desmarcados, mantener el estado actual
    return estadoActual.equals("Solvente") ? "No solvente" : "Solvente";
}

// Método para actualizar el estado del curso en la base de datos
private void actualizarEstadoCurso(Maestros maestro, Cursos curso, String nuevoEstado) {
    // Lógica para actualizar el estado del curso en la base de datos aquí
    // Por ejemplo, utilizando una instancia de DetMaestroCursosDAO para actualizar el estado del curso para el maestro seleccionado
    DetMaestroCursosDAO detMaestroCursosDAO = new DetMaestroCursosDAO();
    int filasActualizadas = detMaestroCursosDAO.actualizarEstadoCurso(maestro, curso, nuevoEstado);
    
    // Verificar si se han actualizado filas en la base de datos
    if (filasActualizadas > 0) {
        // Registro exitoso en la base de datos
        System.out.println("Se ha actualizado el estado del curso correctamente en la base de datos.");
        // Actualizar la tabla en la interfaz para reflejar los cambios
        llenadoDeTablas();
    } else {
        // Error al actualizar el estado del curso en la base de datos
        System.out.println("Error al actualizar el estado del curso en la base de datos.");
    }


    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
//      
//        txtbuscado.setText("");
//        btnRegistrar.setEnabled(true);
//        btnModificar.setEnabled(true);
//        btnEliminar.setEnabled(true);
//
//        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
//        try {
//            if ((new File("src\\main\\java\\ayudas\\AyudaSecciones.chm")).exists()) {
//                Process p = Runtime
//                        .getRuntime()
//                        .exec("rundll32 url.dll,FileProtocolHandler src\\main\\java\\ayudas\\AyudaSecciones.chm");
//                p.waitFor();
//            } else {
//                System.out.println("La ayuda no Fue encontrada");
//            }
//            System.out.println("Correcto");
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chkActaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkActaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkActaActionPerformed

    private void chkRepNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRepNotasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkRepNotasActionPerformed

    private void cmbMaestrosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMaestrosItemStateChanged
     
    }//GEN-LAST:event_cmbMaestrosItemStateChanged

    private void cmbMaestrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMaestrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMaestrosActionPerformed

    private void chkActaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkActaItemStateChanged
llenadoDeTablas();

        // TODO add your handling code here:
    }//GEN-LAST:event_chkActaItemStateChanged

    private void chkPlanificacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkPlanificacionItemStateChanged
        // TODO add your handling code here:
        
        llenadoDeTablas();
    }//GEN-LAST:event_chkPlanificacionItemStateChanged

    private void chkExamenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkExamenItemStateChanged

llenadoDeTablas();
        // TODO add your handling code here:
    }//GEN-LAST:event_chkExamenItemStateChanged

    private void chkRepNotasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkRepNotasItemStateChanged
llenadoDeTablas();
        // TODO add your handling code here:
    }//GEN-LAST:event_chkRepNotasItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JCheckBox chkActa;
    private javax.swing.JCheckBox chkExamen;
    private javax.swing.JCheckBox chkPlanificacion;
    private javax.swing.JCheckBox chkRepNotas;
    private javax.swing.JComboBox<String> cmbCursos;
    private javax.swing.JComboBox<String> cmbMaestros;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb;
    private javax.swing.JLabel lb2;
    private javax.swing.JLabel lbusu;
    private javax.swing.JTable tblDocumentos;
    // End of variables declaration//GEN-END:variables

    private List<tablaCursos> fillTable() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
